version: "3.3"

services:
  service:
    # Use the latest adguardhome image available
    image: adguard/adguardhome:latest
    ports:
      # Listen on port 53, default for DNS
      # Mode is host so the container can know the IP of the clients
      - target: 53
        published: 53
        mode: host
        protocol: tcp
      # Listen on port 53, default for DNS
      # Mode is host so the container can know the IP of the clients
      - target: 53
        published: 53
        mode: host
        protocol: udp

    environment:
      TZ: ${TIME_ZONE:-America/Sao_Paulo}

    deploy:
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network
        - traefik.docker.network=traefik-public
        # Use the custom label "traefik.constraint-label=traefik-public"
        - traefik.constraint-label=traefik-public
        # traefik-https the actual router using HTTPS
        # Uses the environment variable BASE_DOMAIN
        - traefik.http.routers.adguardhome.rule=Host(`adguard.${BASE_DOMAIN?Variable not set}`)
        - traefik.http.routers.adguardhome.entrypoints=https
        - traefik.http.routers.adguardhome.tls=true
        # Serve the container on port 3000
        - traefik.http.services.adguardhome.loadbalancer.server.port=3000
        # Use the "le" (Let's Encrypt) resolver
        - traefik.http.routers.adguardhome.tls.certresolver=le

        # Homepage labels
        - homepage.group=DNS
        - homepage.name=Adguard
        - homepage.icon=adguard-home.png
        - homepage.href=https://adguard.${BASE_DOMAIN?Variable not set}
        - homepage.description=DNS server & Ad blocker

    volumes:
      # Mount the volume to store adguard data
      - service:/opt/adguardhome/
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      traefik-public:
        aliases:
          - adguardhome

  sync:
    # Use the latest adguardhome-sync image available
    image: ghcr.io/bakito/adguardhome-sync:latest
    environment:
      TZ: ${TIME_ZONE:-America/Sao_Paulo}
    depends_on:
      - service
    deploy:
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network
        - traefik.docker.network=traefik-public
        # Use the custom label "traefik.constraint-label=traefik-public"
        - traefik.constraint-label=traefik-public
        # traefik-https the actual router using HTTPS
        # Uses the environment variable BASE_DOMAIN
        - traefik.http.routers.adguardhome-sync.rule=Host(`adguard-sync.${BASE_DOMAIN?Variable not set}`)
        - traefik.http.routers.adguardhome-sync.entrypoints=https
        - traefik.http.routers.adguardhome-sync.tls=true
        # Serve the container on port 8080
        - traefik.http.services.adguardhome-sync.loadbalancer.server.port=8080
        # Use the "le" (Let's Encrypt) resolver
        - traefik.http.routers.adguardhome-sync.tls.certresolver=le
        # Enable HTTP Basic auth using the middleware
        - traefik.http.routers.adguardhome-sync.middlewares=admin-auth

    volumes:
      # Mount the volume to store the sync config
      - sync:/config/:ro
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      traefik-public:

volumes:
  # Create the volumes to store adguard and adguard-sync data, the volumes are saved on the NFS share
  # In specific, inside the adguard directory
  sync:
    # The nfs driver comes backed into the local driver
    driver: local
    driver_opts:
      type: "nfs"
      # The ip of the NFS server
      o: addr=${NFS_IP?Variable not set},nolock,soft,rw
      # The path the volume will be saved at
      # It needs to exist or the service will not start
      device: ":${NFS_SHARE_PATH?Variable not set}/docker-swarm/adguard/adguardsync-volume"

  service:
    driver: local
    driver_opts:
      type: "nfs"
      o: addr=${NFS_IP?Variable not set},nolock,soft,rw
      device: ":${NFS_SHARE_PATH?Variable not set}/docker-swarm/adguard/adguardhome-volume"

networks:
  # Use the previously created public network "traefik-public", shared with other
  # services and traefik, the service will be publicly available via Traefik
  traefik-public:
    external: true
